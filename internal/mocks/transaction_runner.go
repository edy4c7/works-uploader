// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/transaction_runner.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	repositories "github.com/edy4c7/darkpot-school-works/internal/repositories"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTransactionRunner is a mock of TransactionRunner interface
type MockTransactionRunner struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRunnerMockRecorder
}

// MockTransactionRunnerMockRecorder is the mock recorder for MockTransactionRunner
type MockTransactionRunnerMockRecorder struct {
	mock *MockTransactionRunner
}

// NewMockTransactionRunner creates a new mock instance
func NewMockTransactionRunner(ctrl *gomock.Controller) *MockTransactionRunner {
	mock := &MockTransactionRunner{ctrl: ctrl}
	mock.recorder = &MockTransactionRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionRunner) EXPECT() *MockTransactionRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockTransactionRunner) Run(arg0 context.Context, arg1 repositories.TransactionFunction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockTransactionRunnerMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTransactionRunner)(nil).Run), arg0, arg1)
}
