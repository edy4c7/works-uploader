// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/works_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	beans "github.com/edy4c7/works-uploader/internal/beans"
	entities "github.com/edy4c7/works-uploader/internal/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWorksService is a mock of WorksService interface
type MockWorksService struct {
	ctrl     *gomock.Controller
	recorder *MockWorksServiceMockRecorder
}

// MockWorksServiceMockRecorder is the mock recorder for MockWorksService
type MockWorksServiceMockRecorder struct {
	mock *MockWorksService
}

// NewMockWorksService creates a new mock instance
func NewMockWorksService(ctrl *gomock.Controller) *MockWorksService {
	mock := &MockWorksService{ctrl: ctrl}
	mock.recorder = &MockWorksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorksService) EXPECT() *MockWorksServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockWorksService) GetAll(arg0 context.Context) ([]*entities.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*entities.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockWorksServiceMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockWorksService)(nil).GetAll), arg0)
}

// FindByID mocks base method
func (m *MockWorksService) FindByID(arg0 context.Context, arg1 uint64) (*entities.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*entities.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockWorksServiceMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockWorksService)(nil).FindByID), arg0, arg1)
}

// Create mocks base method
func (m *MockWorksService) Create(arg0 context.Context, arg1 *beans.WorksFormBean) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockWorksServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWorksService)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (m *MockWorksService) Update(arg0 context.Context, arg1 uint64, arg2 *beans.WorksFormBean) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockWorksServiceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWorksService)(nil).Update), arg0, arg1, arg2)
}

// DeleteByID mocks base method
func (m *MockWorksService) DeleteByID(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockWorksServiceMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockWorksService)(nil).DeleteByID), arg0, arg1)
}
